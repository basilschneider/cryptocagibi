#!/usr/bin/env bash

# Selection (default: everything)
filter=$
highlight=foobar
colors=yes
newdata=yes
show=111111
datafile="$(dirname $0)/data"

# Strings holding information such as futures buy price
# This option can be called multiple times; a string is concatenated, rather
# than an array, since passing the string to awk is simpler
futs=""
liqs=""

usage(){
    echo "Get selected crypto prices."
    echo
    echo "Usage: $(basename $0) [option]"
    echo "where [option] can be"
    echo "  -h               Show this help"
    echo "  -c               Toggle colors (default: ${colors})"
    echo "  -f               Regex to filter results"
    echo "  -F               Regex to highlight results"
    echo "  -d               Toggle to retrieve new data (default: ${newdata})"
    echo "  -s               Show Name/Price/dLST/dREF/dFUT/dLIQ"
    echo "                   (default: ${show})"
    echo " --fut             Pass (multiple) (name,value) pairs for dFUT"
    echo " --liq             Pass (multiple) (name,value) pairs for dLIQ"
}

run(){

    if [ "${newdata}" == yes ]; then
        # Get data
        date >> "${datafile}"
        curl \
            -s \
            -H "X-CMC_PRO_API_KEY: 048a5c0b-b2e9-42dd-8166-c12b9fe3f72e" \
            -H "Accept: application/json" \
            -d "symbol=BTC,ETH,XMR,XRP,DOGE,VET,ICX,ONE,BEPRO,SHIB,POLX,ADA,FTT,SOL,NRV,RUNE,ERN,MATIC" \
            -d "aux=date_added" \
            -G https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest |
            egrep -o '"symbol[^,]*|"price[^,]*' >> "${datafile}"

        echo >> "${datafile}"
    else
        echo "No new data retrieved."
    fi

    # Parse last two datasets
    tail -n 76 "${datafile}" | \
        awk \
            -v filter="${filter}" \
            -v highlight="${highlight}" \
            -v colors="${colors}" \
            -v show="${show}" \
            -v futs="${futs:1}" \
            -v liqs="${liqs:1}" \
        'BEGIN{

            # Set file delimiter
            FS = ":"

            # Colors
            if (colors == "no"){
                green = ""
                orange = ""
                yellow = ""
                red = ""
                blue = ""
                colorend = ""
            }else{
                green = "[38;5;34m"
                orange = "[38;5;202m"
                yellow = "[38;5;226m"
                red = "[38;5;160m"
                blue = "[38;5;27m"
                pink = "[48;5;201m"
                colorend = "\033[0m"
            }

            # Set reference prices
            price_ref["ETH"] = 1595.88
            price_ref["BTC"] = 36820.21
            price_ref["XMR"] = 163.59
            price_ref["XRP"] = 0.5819
            price_ref["DOGE"] = 0.35711
            price_ref["VET"] = 0.2407
            price_ref["ICX"] = 2.6118
            price_ref["ONE"] = 0.1436
            price_ref["BEPRO"] = 0.01733111
            price_ref["SHIB"] = 0.00003300
            price_ref["POLX"] = 0.0027796
            price_ref["FTT"] = 30.1
            price_ref["SOL"] = 26.1

            # Set future prices
            # First split into (name,val) pairs
            split(futs, futa, "|")
            for (item in futa){
                split(futa[item], futa2, ",")
                price_fut[futa2[1]] = futa2[2]
            }

            # Set liquidation prices
            # First split into (name,val) pairs
            split(liqs, liqa, "|")
            for (item in liqa){
                split(liqa[item], liqa2, ",")
                price_liq[liqa2[1]] = liqa2[2]
            }
        }

        # Find symbol
        /"symbol"/ {
            gsub("\"", "", $2)
            symbol = $2
        }

        # Find last and current price
        /"price"/ {

            # If symbol is not in filter, skip
            if (symbol !~ filter){
                next
            }
            if (symbol in price_lst){
                price_now[symbol] = $2
            }else{
                price_lst[symbol] = $2
            }
        }
        END{
            for (symbol in price_now){

                # Show last and current price
                # Set color for price, depending on negative-positive
                if (price_now[symbol] >= price_lst[symbol]){
                    colorbegin = green
                }else{
                    colorbegin = orange
                }
                # Set color for symbol, if requested
                if (symbol ~ highlight){
                    colorhighlight = pink
                }else{
                    colorhighlight = ""
                }
                if (substr(show, 1, 1) == "1"){
                    printf "%s%5-s%s %s|%s ",
                            colorhighlight,
                            symbol,
                            colorend,
                            blue,
                            colorend
                }
                if (substr(show, 2, 1) == "1"){
                    printf "%s$: %9.4g%s %s|%s ",
                            colorhighlight,
                            price_now[symbol],
                            colorend,
                            blue,
                            colorend
                }
                if (substr(show, 3, 1) == "1"){
                    printf "%sdLST:%s%s %10.4g (%7.3f %)%s %s|%s ",
                            colorhighlight,
                            colorend,
                            colorbegin,
                            price_now[symbol]-price_lst[symbol],
                            100*(price_now[symbol]-price_lst[symbol])/price_lst[symbol],
                            colorend,
                            blue,
                            colorend
                }

                # If available, show difference to reference price
                if (substr(show, 4, 1) == "1"){
                    if (symbol in price_ref){
                        printf "%sdREF:%s %10.4g (%8.3f %) %s|%s ",
                                colorhighlight,
                                colorend,
                                price_now[symbol]-price_ref[symbol],
                                100*(price_now[symbol]-price_ref[symbol])/price_ref[symbol],
                                blue,
                                colorend
                    }else{
                        # Print empty space, in order to align data below
                        printf "%29s %s|%s ",
                                " ",
                                blue,
                                colorend
                    }
                }

                # If available, show difference to future buy price
                if (substr(show, 5, 1) == "1" && symbol in price_fut){

                    # Set color, depending on negative-positive
                    pdiff = 100*(price_now[symbol]-price_fut[symbol])/price_fut[symbol]
                    if (pdiff > 0){
                        colorbegin = green
                    }else if (pdiff > -5){
                        colorbegin = yellow
                    }else if (pdiff > -20){
                        colorbegin = orange
                    }else{
                        colorbegin = red
                    }
                    printf "%sdFUT:%s%s %10.4g (%7.3f %)%s %s|%s ",
                            colorhighlight,
                            colorend,
                            colorbegin,
                            price_now[symbol]-price_fut[symbol],
                            pdiff,
                            colorend,
                            blue,
                            colorend
                }

                # If available, show difference to liquidation price
                if (substr(show, 6, 1) == "1" && symbol in price_liq){
                    liqdiffp = 100*(price_now[symbol]-price_liq[symbol])/price_liq[symbol]

                    # Set color, if getting close to liquidation price
                    colorbegin = "\033[0m" # neutral
                    if (liqdiffp < 3){
                        colorbegin = yellow
                    }
                    if (liqdiffp < 2){
                        colorbegin = orange
                    }
                    if (liqdiffp < 1){
                        colorbegin = red
                    }
                    printf "%sdLIQ:%s%s %10.4g (%7.3f %)%s %s|%s ",
                            colorhighlight,
                            colorend,
                            colorbegin,
                            price_now[symbol]-price_liq[symbol],
                            liqdiffp,
                            colorend,
                            blue,
                            colorend
                }

                # In any case, end with a new line
                printf "\n"
            }
        }
    '
}

parseOptions(){

    OPT=$(getopt \
        --options hcf:F:ds: \
        --longoptions fut: \
        --longoptions liq: \
        --name "$0" \
        -- "$@"
    )

    if [ $? -ne 0 ]; then
        usage
        exit 1
    fi

    eval set -- "${OPT}"

    while true; do
        case "${1}" in
            -h) usage; exit 0;;
            -c) colors=no; shift 1;;
            -f) filter="${2}"; shift 2;;
            -F) highlight="${2}"; shift 2;;
            -d) newdata=no; shift 1;;
            -s) show="${2}"; shift 2;;
            --fut) futs+="|${2^^}"; shift 2;;
            --liq) liqs+="|${2^^}"; shift 2;;
            --) shift; break;;
        esac
    done

    run "$@"
}

parseOptions "$@"
